const CACHE_NAME="StoryApp-V1",STATIC_CACHE="StoryApp-Static-V1",DYNAMIC_CACHE="StoryApp-Dynamic-V1",staticUrlsToCache=["/","/index.html","/styles/styles.css","/scripts/index.js","/scripts/pages/app.js","/scripts/routes/routes.js","/scripts/routes/url-parser.js","/scripts/utils/index.js","/scripts/utils/auth.js","/scripts/config.js","/scripts/templates.js","/public/images/logo.png","/public/favicon.png","/public/images/jumbotron.jpg","/public/manifest.json","/scripts/pages/home/home-page.js","/scripts/pages/home/home-presenter.js","/scripts/pages/auth/login/login-page.js","/scripts/pages/auth/login/login-presenter.js","/scripts/pages/auth/register/register-page.js","/scripts/pages/auth/register/register-presenter.js","/scripts/pages/new/new-page.js","/scripts/pages/new/new-presenter.js","/scripts/pages/story-detail/story-detail-page.js","/scripts/pages/story-detail/story-detail-presenter.js","/scripts/pages/about/about-page.js","/scripts/utils/camera.js","/scripts/utils/map.js","/scripts/utils/notification.js","/scripts/utils/notification-toggle.js","/scripts/data/api.js","/scripts/data/api-mapper.js"],dynamicUrlsPattern=[/^https:\/\/story-api\.dicoding\.dev\/v1\/stories/,/^https:\/\/story-api\.dicoding\.dev\/v1\/users/,/\.(?:png|gif|jpg|jpeg|svg|webp)$/];self.addEventListener("install",(e=>{console.log("Service Worker: Installing..."),e.waitUntil(Promise.all([caches.open(STATIC_CACHE).then((e=>(console.log("Service Worker: Caching static files (Application Shell)"),e.addAll(staticUrlsToCache)))),caches.open(DYNAMIC_CACHE).then((e=>(console.log("Service Worker: Dynamic cache initialized"),e)))]).then((()=>(console.log("Service Worker: Installed successfully"),self.skipWaiting()))).catch((e=>{console.error("Service Worker: Installation failed",e)})))})),self.addEventListener("activate",(e=>{console.log("Service Worker: Activating..."),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(e!==STATIC_CACHE&&e!==DYNAMIC_CACHE&&e!==CACHE_NAME)return console.log("Service Worker: Deleting old cache",e),caches.delete(e)}))))).then((()=>(console.log("Service Worker: Activated successfully"),self.clients.claim()))).catch((e=>{console.error("Service Worker: Activation failed",e)})))})),self.addEventListener("fetch",(e=>{const{request:t}=e,s=new URL(t.url);(s.origin===location.origin||s.origin.includes("story-api.dicoding.dev"))&&e.respondWith(caches.match(t).then((e=>e?(console.log("Service Worker: Serving from cache",t.url),e):fetch(t).then((e=>{if(!e||200!==e.status||"basic"!==e.type)return e;const i=e.clone();let o=DYNAMIC_CACHE;return staticUrlsToCache.includes(s.pathname)&&(o=STATIC_CACHE),(dynamicUrlsPattern.some((e=>e instanceof RegExp?e.test(t.url):t.url.includes(e)))||staticUrlsToCache.includes(s.pathname))&&caches.open(o).then((e=>{console.log("Service Worker: Caching new resource",t.url),e.put(t,i)})),e})).catch((e=>(console.log("Service Worker: Fetch failed, serving offline content",e),"document"===t.destination?caches.match("/index.html"):"image"===t.destination?caches.match("/public/images/logo.png"):caches.match(t)))))))})),self.addEventListener("push",(e=>{console.log("Service Worker: Push received",e);let t={title:"Story App",body:"Ada update baru untuk Anda!",icon:"/public/images/logo.png",badge:"/public/favicon.png",tag:"story-notification",data:{url:"/",storyId:null}};if(e.data)try{const s=e.data.json();t={title:s.title||"Story App",body:s.body||"Ada update baru untuk Anda!",icon:s.icon||"/public/images/logo.png",badge:s.badge||"/public/favicon.png",tag:s.tag||"story-notification",data:{url:s.url||"/",storyId:s.storyId||null,action:s.action||"open"},actions:s.actions||[{action:"open",title:"Buka",icon:"/public/images/logo.png"},{action:"close",title:"Tutup"}],requireInteraction:s.requireInteraction||!1,silent:s.silent||!1,vibrate:s.vibrate||[200,100,200]}}catch(e){console.error("Error parsing push notification data:",e)}const s=self.registration.showNotification(t.title,{body:t.body,icon:t.icon,badge:t.badge,tag:t.tag,data:t.data,actions:t.actions,requireInteraction:t.requireInteraction,silent:t.silent,vibrate:t.vibrate});e.waitUntil(s)})),self.addEventListener("notificationclick",(e=>{console.log("Service Worker: Notification clicked",e),e.notification.close();const t=e.action,s=e.notification.data;if("close"===t)return;let i="/";s&&s.storyId?i=`/#/story-detail/${s.storyId}`:s&&s.url&&(i=s.url);const o=clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(let t=0;t<e.length;t++){const o=e[t];if(o.url.includes(self.location.origin)&&"focus"in o)return o.postMessage({type:"NOTIFICATION_CLICKED",url:i,storyId:s?s.storyId:null}),o.focus()}if(clients.openWindow)return clients.openWindow(i)}));e.waitUntil(o)})),self.addEventListener("sync",(e=>{console.log("Service Worker: Background sync",e.tag),"background-sync"===e.tag&&e.waitUntil(console.log("Background sync completed"))})),self.addEventListener("message",(e=>{console.log("Service Worker: Message received",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting()}));